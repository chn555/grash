// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bash-service.proto

package bash

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandRequest struct {
	// Actual command to run
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Current working directory
	Cwd                  string   `protobuf:"bytes,2,opt,name=cwd,proto3" json:"cwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_769f0d952cf1ab41, []int{0}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandRequest) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

type CommandResponse struct {
	// Standard output
	Stdout string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Standard error
	Stderr string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Exit status
	ExitStatus           int32    `protobuf:"varint,3,opt,name=exitStatus,proto3" json:"exitStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_769f0d952cf1ab41, []int{1}
}

func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResponse.Unmarshal(m, b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
}
func (m *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(m, src)
}
func (m *CommandResponse) XXX_Size() int {
	return xxx_messageInfo_CommandResponse.Size(m)
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *CommandResponse) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *CommandResponse) GetExitStatus() int32 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "bash.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "bash.CommandResponse")
}

func init() { proto.RegisterFile("bash-service.proto", fileDescriptor_769f0d952cf1ab41) }

var fileDescriptor_769f0d952cf1ab41 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4a, 0x2c, 0xce,
	0xd0, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x01, 0x89, 0x29, 0xd9, 0x70, 0xf1, 0x39, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x04, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0x27, 0x43, 0x44, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x38, 0x83, 0x60, 0x5c, 0x21, 0x01, 0x2e, 0xe6, 0xe4, 0xf2, 0x14, 0x09, 0x26, 0xb0, 0x28, 0x88,
	0xa9, 0x94, 0xc8, 0xc5, 0x0f, 0xd7, 0x5d, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc6, 0xc5,
	0x56, 0x5c, 0x92, 0x92, 0x5f, 0x5a, 0x02, 0xd5, 0x0d, 0xe5, 0x41, 0xc5, 0x53, 0x8b, 0x8a, 0xa0,
	0xfa, 0xa1, 0x3c, 0x21, 0x39, 0x2e, 0xae, 0xd4, 0x8a, 0xcc, 0x92, 0xe0, 0x92, 0xc4, 0x92, 0xd2,
	0x62, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x24, 0x11, 0xa3, 0x1e, 0x46, 0x2e, 0x6e, 0xa7,
	0xc4, 0xe2, 0x8c, 0x60, 0x88, 0xe3, 0x85, 0x2c, 0xb8, 0xd8, 0x5d, 0x2b, 0x52, 0x93, 0x4b, 0x4b,
	0x52, 0x85, 0x44, 0xf4, 0x40, 0x5e, 0xd0, 0x43, 0x75, 0xbf, 0x94, 0x28, 0x9a, 0x28, 0xc4, 0x5d,
	0x4a, 0x0c, 0x42, 0xce, 0x5c, 0x02, 0x50, 0x9d, 0x8e, 0x79, 0x29, 0xc1, 0x25, 0x45, 0xa9, 0x89,
	0xb9, 0x24, 0x1a, 0x61, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x3c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0xcf, 0x20, 0xbc, 0x52, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BashServiceClient is the client API for BashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BashServiceClient interface {
	// Run a command
	Execute(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	ExecuteAndStream(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (BashService_ExecuteAndStreamClient, error)
}

type bashServiceClient struct {
	cc *grpc.ClientConn
}

func NewBashServiceClient(cc *grpc.ClientConn) BashServiceClient {
	return &bashServiceClient{cc}
}

func (c *bashServiceClient) Execute(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/bash.BashService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bashServiceClient) ExecuteAndStream(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (BashService_ExecuteAndStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BashService_serviceDesc.Streams[0], "/bash.BashService/ExecuteAndStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bashServiceExecuteAndStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BashService_ExecuteAndStreamClient interface {
	Recv() (*CommandResponse, error)
	grpc.ClientStream
}

type bashServiceExecuteAndStreamClient struct {
	grpc.ClientStream
}

func (x *bashServiceExecuteAndStreamClient) Recv() (*CommandResponse, error) {
	m := new(CommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BashServiceServer is the server API for BashService service.
type BashServiceServer interface {
	// Run a command
	Execute(context.Context, *CommandRequest) (*CommandResponse, error)
	ExecuteAndStream(*CommandRequest, BashService_ExecuteAndStreamServer) error
}

// UnimplementedBashServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBashServiceServer struct {
}

func (*UnimplementedBashServiceServer) Execute(ctx context.Context, req *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedBashServiceServer) ExecuteAndStream(req *CommandRequest, srv BashService_ExecuteAndStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteAndStream not implemented")
}

func RegisterBashServiceServer(s *grpc.Server, srv BashServiceServer) {
	s.RegisterService(&_BashService_serviceDesc, srv)
}

func _BashService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BashServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bash.BashService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BashServiceServer).Execute(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BashService_ExecuteAndStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BashServiceServer).ExecuteAndStream(m, &bashServiceExecuteAndStreamServer{stream})
}

type BashService_ExecuteAndStreamServer interface {
	Send(*CommandResponse) error
	grpc.ServerStream
}

type bashServiceExecuteAndStreamServer struct {
	grpc.ServerStream
}

func (x *bashServiceExecuteAndStreamServer) Send(m *CommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bash.BashService",
	HandlerType: (*BashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _BashService_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteAndStream",
			Handler:       _BashService_ExecuteAndStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bash-service.proto",
}
